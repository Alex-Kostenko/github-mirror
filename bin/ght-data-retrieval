require 'rubygems'
require 'amqp'
require 'json'
require 'pp'

require 'ghtorrent/ghtorrent'
require 'ghtorrent/settings'
require 'ghtorrent/logging'
require 'ghtorrent/command'

class GHTDataRetrieval < GHTorrent::Command

  include GHTorrent::Settings
  include GHTorrent::Logging

  def parse(msg)
    JSON.parse(msg)
  end

  def PushEvent(data)
    data['payload']['commits'].each do |c|
      url = c['url'].split(/\//)

      @gh.get_commit url[4], url[5], url[7]
    end
  end

  def WatchEvent(data)
    owner = data['repo']['name'].split(/\//)[0]
    repo = data['repo']['name'].split(/\//)[1]
    watcher = data['actor']['login']
    created_at = data['created_at']

    @gh.get_watcher owner, repo, watcher, created_at
  end

  def FollowEvent(data)
    follower = data['actor']['login']
    followed = data['payload']['target']['login']
    created_at = data['created_at']

    @gh.get_follower(follower, followed, created_at)
  end

  def MemberEvent(data)
    owner = data['actor']['login']
    repo = data['repo']['name'].split(/\//)[1]
    new_member = data['payload']['member']['login']
    created_at = data['created_at']

    @gh.get_project_member(owner, repo, new_member, created_at)
  end

  def CommitCommentEvent(data)
    user = data['actor']['login']
    repo = data['repo']['name'].split(/\//)[1]
    id = data['payload']['comment']['id']
    created_at = data['created_at']

    @gh.get_commit_comment(user, repo, id, created_at)
  end

  def PullRequestEvent(data)
    owner = data['payload']['pull_request']['base']['repo']['owner']['login']
    repo = data['payload']['pull_request']['base']['repo']['name']
    pullreq_id = data['payload']['number']
    action = data['payload']['action']
    created_at = data['created_at']

    @gh.get_pull_request(owner, repo, pullreq_id, action, created_at)
  end

  def ForkEvent(data)
    owner = data['repo']['name'].split(/\//)[0]
    repo = data['repo']['name'].split(/\//)[1]
    fork_id = data['payload']['forkee']['id']
    created_at = data['created_at']

    @gh.get_fork(owner, repo, fork_id, created_at)
  end

  def handlers
    #%w(PushEvent WatchEvent FollowEvent MemberEvent CommitCommentEvent PullRequestEvent ForkEvent)
    %w(PullRequestEvent)
  end

  def logger
    @gh.logger
  end

  def go
    @gh = GHTorrent::Mirror.new(@settings)

    # Graceful exit
    Signal.trap('INT') {
      info "GHTDataRetrieval: Received SIGINT, exiting"
      AMQP.stop { EM.stop }
    }
    Signal.trap('TERM') {
      info "GHTDataRetrieval: Received SIGTERM, exiting"
      AMQP.stop { EM.stop }
    }

    AMQP.start(:host => config(:amqp_host),
               :port => config(:amqp_port),
               :username => config(:amqp_username),
               :password => config(:amqp_password)) do |connection|

      channel = AMQP::Channel.new(connection, :prefetch => config(:amqp_prefetch))
      exchange = channel.topic(config(:amqp_exchange), :durable => true,
                               :auto_delete => false)

      handlers.each { |h|
        queue = channel.queue("#{h}s", {:durable => true})\
                       .bind(exchange, :routing_key => "evt.#{h}")

        info "GHTDataRetrieval: Binding handler #{h} to routing key evt.#{h}"

        queue.subscribe(:ack => true) do |headers, msg|
          begin
            data = parse(msg)
            warn "GHTDataRetrieval: Processing event: #{data['type']}-#{data['id']}"
	          send(h, data)
            headers.ack
          rescue Exception => e
            # Give a message a chance to be reprocessed
            if headers.redelivered?
              data = parse(msg)
              warn "GHTDataRetrieval: Could not process event: #{data['type']}-#{data['id']}"
              headers.reject(:requeue => false)
            else
              headers.reject(:requeue => true)
            end

            STDERR.puts e
            STDERR.puts e.backtrace.join("\n")
          end
        end
      }
    end
  end
end

GHTDataRetrieval.run
